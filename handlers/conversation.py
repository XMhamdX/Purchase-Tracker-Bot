"""
ูุนุงูุฌุงุช ุงููุญุงุฏุซุฉ
"""
import logging
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from src.config import WELCOME_MESSAGE, PRICE, NOTES
from utils.number_converter import convert_to_english_numbers
from database.sheets import add_to_sheets
import traceback

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู
logger = logging.getLogger(__name__)

async def handle_any_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    ูุนุงูุฌ ุฃู ุฑุณุงูุฉ - ูุชู ุงุณุชุฏุนุงุคู ุนูุฏ ุงุณุชูุงู ุฃู ุฑุณุงูุฉ ูู ุงููุณุชุฎุฏู
    ูุฏุนู ุซูุงุซ ุทุฑู ูุฅุฏุฎุงู ุงูููุชุฌุงุช:
    1. ููุชุฌ ูุงุญุฏ ูุน ุณุนุฑู (ูุซู: ูููุง ูขูฃ)
    2. ูุงุฆูุฉ ููุชุฌุงุช ูุน ุฃุณุนุงุฑูุง (ูู ููุชุฌ ูู ุณุทุฑ)
    3. ุงุณู ููุชุฌ ููุท (ุณูุทูุจ ุงูุณุนุฑ ูุงุญูุงู)
    """
    try:
        message_text = update.message.text.strip()
        
        # ุชุฌุงูู ุงูุฑุณุงุฆู ุงููุงุฑุบุฉ
        if not message_text:
            await update.message.reply_text("โ ุงูุฑุฌุงุก ุฅุฏุฎุงู ูุต ุตุญูุญ")
            return ConversationHandler.END
            
        # ุงูุชุญูู ูู ูุฌูุฏ ุนุฏุฉ ููุชุฌุงุช (ูู ููุชุฌ ูู ุณุทุฑ)
        if "\n" in message_text:
            success_count = 0
            error_count = 0
            lines = message_text.split("\n")
            
            for line in lines:
                try:
                    if not line.strip():
                        continue
                        
                    # ุชุญููู ุงูุฃุฑูุงู ุงูุนุฑุจูุฉ ุฅูู ุฅูุฌููุฒูุฉ
                    line = convert_to_english_numbers(line)
                    
                    # ูุญุงููุฉ ูุตู ุงูููุชุฌ ุนู ุงูุณุนุฑ
                    parts = line.strip().split()
                    if len(parts) < 2:
                        error_count += 1
                        continue
                        
                    product = " ".join(parts[:-1])
                    try:
                        price = float(parts[-1])
                        if add_to_sheets(product, price, ""):
                            success_count += 1
                        else:
                            error_count += 1
                    except ValueError:
                        error_count += 1
                        continue
                        
                except Exception as e:
                    logger.error(f"ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุณุทุฑ {line}: {str(e)}")
                    error_count += 1
                    continue
            
            # ุฅุฑุณุงู ููุฎุต ุงููุชุงุฆุฌ
            summary = []
            if success_count > 0:
                summary.append(f"โ ุชู ุฅุถุงูุฉ {success_count} ููุชุฌ ุจูุฌุงุญ")
            if error_count > 0:
                summary.append(f"โ ูุดู ุฅุถุงูุฉ {error_count} ููุชุฌ")
            
            await update.message.reply_text("\n".join(summary))
            await update.message.reply_text(WELCOME_MESSAGE)
            return ConversationHandler.END
            
        # ูุญุงููุฉ ูุตู ุงูููุชุฌ ุนู ุงูุณุนุฑ
        parts = message_text.split()
        if len(parts) >= 2:
            try:
                # ุชุญููู ุงูุฃุฑูุงู ุงูุนุฑุจูุฉ ุฅูู ุฅูุฌููุฒูุฉ
                last_part = convert_to_english_numbers(parts[-1])
                price = float(last_part)
                product = " ".join(parts[:-1])
                
                # ูุญุงููุฉ ุฅุถุงูุฉ ุงูููุชุฌ ููุฌุฏูู
                if add_to_sheets(product, price, ""):
                    await update.message.reply_text(f"โ ุชู ุฅุถุงูุฉ {product} ุจุณุนุฑ {price} ุจูุฌุงุญ!")
                    await update.message.reply_text(WELCOME_MESSAGE)
                    return ConversationHandler.END
                else:
                    # ุฅุฐุง ูุดูุช ุงูุฅุถุงูุฉุ ูุทูุจ ูู ุงููุณุชุฎุฏู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู
                    await update.message.reply_text("โ ุญุฏุซ ุฎุทุฃ ูู ุฅุถุงูุฉ ุงูููุชุฌ. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.")
                    return ConversationHandler.END
                
            except ValueError:
                # ุฅุฐุง ูู ููู ุขุฎุฑ ุฌุฒุก ุฑููุงูุ ูุนุชุจุฑ ุงููู ุงุณู ููุชุฌ
                pass
                
        # ุฅุฐุง ูุตููุง ููุงุ ูุนุชุจุฑ ุงููุต ููู ุงุณู ููุชุฌ
        context.user_data['product'] = message_text
        await update.message.reply_text("๐ฐ ุฃุฏุฎู ุณุนุฑ ุงูููุชุฌ (ุฑูู ููุท):")
        return PRICE
        
    except Exception as e:
        logger.error(f"ุฎุทุฃ ุบูุฑ ูุชููุน: {str(e)}")
        await update.message.reply_text("โ ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุชููุน. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.")
        return ConversationHandler.END

async def price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ูุนุงูุฌ ุฅุฏุฎุงู ุงูุณุนุฑ"""
    try:
        # ุชุญููู ุงูุฃุฑูุงู ุงูุนุฑุจูุฉ ุฅูู ุฅูุฌููุฒูุฉ ูุจู ุงูุชุญููู
        price_text = convert_to_english_numbers(update.message.text)
        price = float(price_text)
        context.user_data['price'] = price
        await update.message.reply_text(
            '๐ ุฃุฏุฎู ููุงุญุธุงุช ุฅุถุงููุฉ\n'
            'ููููู ุชุฎุทู ุงูููุงุญุธุงุช ุนู ุทุฑูู:\n'
            '- ุฅุฑุณุงู "." (ููุทุฉ)\n'
            '- ุฅุฑุณุงู "ูุง"\n'
            '- ุงุณุชุฎุฏุงู ุงูุฃูุฑ /skip'
        )
        return NOTES
    except ValueError:
        logger.warning(f"ูููุฉ ุบูุฑ ุตุญูุญุฉ ููุณุนุฑ: {update.message.text}")
        await update.message.reply_text(
            'โ ุงูุฑุฌุงุก ุฅุฏุฎุงู ุฑูู ุตุญูุญ ููุณุนุฑ'
        )
        return PRICE

async def notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ูุนุงูุฌ ุฅุฏุฎุงู ุงูููุงุญุธุงุช"""
    try:
        # ุงูุชุญูู ูู ูุฌูุฏ ุงูุจูุงูุงุช ุงูุณุงุจูุฉ
        if 'product' not in context.user_data or 'price' not in context.user_data:
            logger.error("ูู ูุชู ุงูุนุซูุฑ ุนูู ุจูุงูุงุช ุงูููุชุฌ ุฃู ุงูุณุนุฑ")
            await update.message.reply_text("โ ุญุฏุซ ุฎุทุฃ: ูู ูุชู ุงูุนุซูุฑ ุนูู ุจูุงูุงุช ุงูููุชุฌ. ุงูุฑุฌุงุก ุงูุจุฏุก ูู ุฌุฏูุฏ.")
            context.user_data.clear()
            return ConversationHandler.END

        notes_text = update.message.text
        product = context.user_data['product']
        price = context.user_data['price']
        
        logger.info(f"ูุญุงููุฉ ุฅุถุงูุฉ ููุชุฌ: {product} ุจุณุนุฑ {price} ูููุงุญุธุงุช: {notes_text}")
        
        # ุงูุชุญูู ูู ุฑุบุจุฉ ุงููุณุชุฎุฏู ูู ุชุฎุทู ุงูููุงุญุธุงุช
        if notes_text in [".", "ูุง", "/skip"]:
            notes_text = ""
            logger.info(f"ุชู ุชุฎุทู ุงูููุงุญุธุงุช ููููุชุฌ: {product}")
        
        # ูุญุงููุฉ ุฅุถุงูุฉ ุงูุจูุงูุงุช ุฅูู ุงูุฌุฏูู
        success = add_to_sheets(product, price, notes_text)
        if success:
            logger.info(f"ุชู ุฅุถุงูุฉ ุงูููุชุฌ ุจูุฌุงุญ: {product}")
            await update.message.reply_text(
                f"โ ุชู ุฅุถุงูุฉ ุงูููุชุฌ ุจูุฌุงุญ!\n"
                f"ุงูููุชุฌ: {product}\n"
                f"ุงูุณุนุฑ: {price}\n"
                f"ุงูููุงุญุธุงุช: {notes_text if notes_text else 'ูุง ููุฌุฏ'}"
            )
        else:
            logger.error(f"ูุดู ูู ุฅุถุงูุฉ ุงูููุชุฌ: {product}")
            await update.message.reply_text("โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅุถุงูุฉ ุงูููุชุฌ. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.")
            
        # ูุณุญ ุจูุงูุงุช ุงููุณุชุฎุฏู
        context.user_data.clear()
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูููุงุญุธุงุช: {str(e)}")
        logger.error(traceback.format_exc())
        await update.message.reply_text("โ ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุทูุจู. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.")
        context.user_data.clear()
        return ConversationHandler.END
